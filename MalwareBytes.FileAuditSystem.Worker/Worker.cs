using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Service;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace MalwareBytes.FileAuditSystem.Worker
{
    public class Worker : BackgroundService
    {
        private readonly IOptions<MonitorConfigurationDTO> _options;
        private List<IMonitorService> _monitorServiceList;

        public Worker(IOptions<MonitorConfigurationDTO> options)
        {
            _options = options;
        }

        public override Task StartAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("Log Exe is started !");
            Console.WriteLine($"Worker running at: {DateTimeOffset.Now}");
            _monitorServiceList = new List<IMonitorService>();

            return base.StartAsync(cancellationToken);
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            foreach (var monitorOption in _options.Value.MonitorOptions)
            {
                _monitorServiceList.Add(new MonitorService(monitorOption)
                                            .SetAuditRule()
                                                .ArrangePermissions()
                                                    .AttahLogWatcher());

            }

            while (!stoppingToken.IsCancellationRequested)
            {
                await Task.Delay(1000, stoppingToken);
            }
        }

        public override Task StopAsync(CancellationToken cancellationToken)
        {
            Console.WriteLine("Log Exe is stopped !");
            _monitorServiceList.ForEach(x =>
            {
                x.RemoveAuditRule();
                x.Dispose();
            });

            return base.StopAsync(cancellationToken);
        }

        public override void Dispose()
        {
            base.Dispose();
        }

    }
}
