using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Service;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Security.Permissions;
using System.Threading;
using System.Threading.Tasks;

namespace MalwareBytes.FileAuditSystem.Worker
{
    public class Worker : BackgroundService
    {
        private readonly ILogger<Worker> _logger;
        private readonly IOptions<List<MonitorOption>> _options;

        public Worker(ILogger<Worker> logger, IOptions<List<MonitorOption>> options)
        {
            _logger = logger;
            _options = options;
        }

        [PermissionSet(SecurityAction.Demand, Name = "FullTrust")]
        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            foreach (var monitorOption in _options.Value)
            {
                MonitorService monitor = new MonitorService(monitorOption);

                monitor
                    .AttahWatcher()
                        .AttahEvents()
                            .Listen();
            }

            while (!stoppingToken.IsCancellationRequested)
            {
                //_logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);

                await Task.Delay(1000, stoppingToken);
            }
        }
    }
}
