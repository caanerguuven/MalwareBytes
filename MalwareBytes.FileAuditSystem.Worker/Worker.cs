using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Service;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace MalwareBytes.FileAuditSystem.Worker
{
    public class Worker : BackgroundService
    {
        private readonly ILogger<Worker> _logger;

        private readonly IOptions<MonitorConfigurationDTO> _options;
        private List<IMonitorService> _monitorServiceList;

        public Worker(ILogger<Worker> logger, IOptions<MonitorConfigurationDTO> options)
        {
            _logger = logger;
            _options = options;
        }

        public override Task StartAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Log Exe is started !");
            _logger.LogInformation($"Worker running at: {DateTimeOffset.Now.ToUniversalTime():o}");
            _monitorServiceList = new List<IMonitorService>();

            return base.StartAsync(cancellationToken);
        }

        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
        {
            try
            {
                while (!stoppingToken.IsCancellationRequested)
                {
                    if (_monitorServiceList.Count == 0)
                    {
                        foreach (var monitorOption in _options.Value.MonitorOptions)
                        {
                            _monitorServiceList.Add(new MonitorService(monitorOption, _options.Value.LogFilePath)
                                               .SetLogger(_logger)
                                                   .SetAuditRule()
                                                       .ArrangePermissions()
                                                           .PrepareAuditEventHandlers()
                                                               .AttachLogWatcher());
                        }
                    }

                    await Task.Delay(1000, stoppingToken);
                }
            }
            catch (Exception ex) when (stoppingToken.IsCancellationRequested)
            {
                _logger.LogWarning(ex, "Execution is Cancelled");
            }
            catch (Exception ex)
            {
                _logger.LogError("Handled Exception occurred in the system !");
                _logger.LogError($"Error Message : {ex.Message}");
            }
        }

        public override Task StopAsync(CancellationToken cancellationToken)
        {
            _logger.LogInformation("Log Exe is stopped !");
            _monitorServiceList.ForEach(x =>
            {
                x.RemoveAuditRule();
                x.Dispose();
            });

            return base.StopAsync(cancellationToken);
        }

        public override void Dispose()
        {
            base.Dispose();
        }

    }
}
