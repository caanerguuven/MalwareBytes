using MalwareBytes.FileAuditSystem.Domain.Constant;
using MalwareBytes.FileAuditSystem.Domain.Entity;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using System.Collections.Generic;
using System.Diagnostics.Eventing.Reader;
using System.Threading.Tasks;

namespace MalwareBytes.FileAuditSystem.Service.EventHandlers
{
    public class AccessTypeParsingAuditEventHandler : AuditEventHandler
    {
        public async override Task HandleRequest(EventRecordWrittenEventArgs source, EventEntity target)
        {
            string accessTypeList = source.EventRecord.Properties[8].Value.ToString();
            List<string> cleanedAccessTypeList = GetCleanAccessTypes(accessTypeList);
            string determinedAccessType = DetermineAccessTypes(cleanedAccessTypeList);

            target.AccessType = determinedAccessType;

            if (_nextHandler != null)
            {
                await _nextHandler.HandleRequest(source, target);
            }
        }

        private List<string> GetCleanAccessTypes(string accessTypeList)
        {
            List<string> cleanedAccessTypes = new List<string>();
            var accessTypeArr = accessTypeList.Split("%%");
            foreach (var accessType in accessTypeArr)
            {
                string cleanedStr = accessType.Trim().Replace("\r", "").Replace("\n", "").Replace("\t", "");
                if (!string.IsNullOrWhiteSpace(cleanedStr))
                {
                    cleanedAccessTypes.Add(cleanedStr);
                }
            }

            return cleanedAccessTypes;
        }

        private string DetermineAccessTypes(List<string> accessTypeList)
        {
            List<string> determinedAccessTypes = new List<string>();
            foreach (var accessType in accessTypeList)
            {
                determinedAccessTypes.Add(Constants.DefinedAccessTypes.ContainsKey(accessType) ? Constants.DefinedAccessTypes[accessType] : "Undefined Process");
            }

            return string.Join(" - ", determinedAccessTypes);
        }
    }
}
