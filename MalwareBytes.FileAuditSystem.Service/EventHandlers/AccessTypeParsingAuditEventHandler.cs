using MalwareBytes.FileAuditSystem.Domain.Constant;
using MalwareBytes.FileAuditSystem.Domain.Entity;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MalwareBytes.FileAuditSystem.Service.EventHandlers
{
    public class AccessTypeParsingAuditEventHandler : AuditEventHandler
    {
        public async override Task HandleRequest(EventEntity eventEntity)
        {
            string accessTypeList = EventRecord.Properties[9].Value.ToString();
            List<string> cleanedAccessTypeList = GetCleanAccessTypes(accessTypeList);
            string determinedAccessType = DetermineAccessTypes(cleanedAccessTypeList);

            eventEntity.AccessType = determinedAccessType;

            await _nextHandler?.HandleRequest(eventEntity);
        }

        private List<string> GetCleanAccessTypes(string accessTypeList)
        {
            List<string> cleanedAccessTypes = new List<string>();
            var accessTypeArr = accessTypeList.Split("%%");
            foreach (var accessType in accessTypeArr)
            {
                cleanedAccessTypes.Add(accessType.Trim());
            }

            return cleanedAccessTypes;
        }

        private string DetermineAccessTypes(List<string> accessTypeList)
        {
            string determinedAccessTypes = string.Empty;
            foreach (var accessType in accessTypeList)
            {
                determinedAccessTypes += Constants.DefinedAccessTypes.ContainsKey(accessType) ? Constants.DefinedAccessTypes[accessType] : "Undefined Process";
            }

            return determinedAccessTypes;
        }
    }
}
