using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.AccessControl;
using System.Security.Principal;

namespace MalwareBytes.FileAuditSystem.Service
{
    public class MonitorService : IMonitorService
    {
        private MonitorOption _monitor;
        private FileSystemWatcher _watcher;
        public MonitorService(MonitorOption monitor)
        {
            _monitor = monitor;
        }

        public IMonitorService AttahWatcher()
        {
            _watcher = new FileSystemWatcher();
            _watcher.Path = _monitor.Path;
            _watcher.Filter = _monitor.FileFilter;
            _watcher.IncludeSubdirectories = _monitor.IncludeSubDirectories;
            _watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.DirectoryName | NotifyFilters.CreationTime;

            return this;
        }

        public IMonitorService AttahEvents()
        {
            _watcher.Created += _monitor.IsCreatedEventWatched ? new FileSystemEventHandler(onCreatedWithinFolder) : null;
            _watcher.Deleted += _monitor.IsDeletedEventWatched ? new FileSystemEventHandler(onDeletedWithinFolder) : null;
            _watcher.Changed += _monitor.IsChangedEventWatched ? new FileSystemEventHandler(onChangedWithinFolder) : null;
            _watcher.Renamed += _monitor.IsRenamedEventWatched ? new RenamedEventHandler(onRenamedWithinFolder) : null;
            _watcher.Error += onError;

            return this;
        }

        public IMonitorService Listen()
        {
            _watcher.EnableRaisingEvents = true;


            //static olacak
            var account = new SecurityIdentifier(WellKnownSidType.WorldSid, null).Translate(typeof(NTAccount));

            FileSecurity fSecurity = new FileInfo(_monitor.Path).GetAccessControl(AccessControlSections.Audit);

            fSecurity.AddAuditRule(new FileSystemAuditRule(account, FileSystemRights.WriteData | FileSystemRights.Delete | FileSystemRights.ChangePermissions, AuditFlags.Success | AuditFlags.Failure));

            new FileInfo(_monitor.Path).SetAccessControl(fSecurity);

            return this;
        }

        private void onError(object sender, ErrorEventArgs e)
        {
            Console.WriteLine(e.GetException().Message);
        }

        private void onRenamedWithinFolder(object source, RenamedEventArgs e)
        {
            /*
             Obtain info
             Fill FolderEventEntity
             Maybe start processor
             Send Log
             */
            Console.WriteLine($"onRenamed -> Folder : {_monitor.Name} New Name : {e.Name}");
        }

        private void onChangedWithinFolder(object source, FileSystemEventArgs e)
        {
            EventLog log = EventLog.GetEventLogs().First(o => o.Log == "Security" );
            log.EnableRaisingEvents = true;
            log.EntryWritten += (s, e) => { 
                Console.WriteLine(e.Entry.EntryType); 
            };

            Console.WriteLine($"onChanged ->  Folder : {_monitor.Name} Changed {e.Name}");
        }

        private void onDeletedWithinFolder(object source, FileSystemEventArgs e)
        {
            Console.WriteLine($"onDeleted -> Folder : {_monitor.Name} Deleted {e.Name}");
        }

        private void onCreatedWithinFolder(object source, FileSystemEventArgs e)
        {
            Console.WriteLine($"onCreated -> Folder : {_monitor.Name} Created {e.Name}");
        }

        public void Dispose()
        {
            _watcher.Dispose();
        }

    }
}
