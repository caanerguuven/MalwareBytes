using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Domain.Entity;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using MalwareBytes.FileAuditSystem.Service.EventHandlers;
using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;

namespace MalwareBytes.FileAuditSystem.Service
{
    public class MonitorService : IMonitorService
    {
        private readonly MonitorOption _monitor;
        private readonly string _logFilePath;
        private ILogger _logger;

        private FileSystemAuditRule _auditRule;
        private EventLogWatcher _logWatcher;

        private AuditEventHandler _auditEventHandler;
        public MonitorService(MonitorOption monitor, string logFilePath)
        {
            _monitor = monitor;
            _logFilePath = logFilePath;
        }

        public IMonitorService SetLogger(ILogger logger)
        {
            _logger = logger;

            return this;
        }

        public IMonitorService SetAuditRule()
        {
            IdentityReference account = new SecurityIdentifier(WellKnownSidType.WorldSid, null).Translate(typeof(NTAccount));
            _auditRule = new FileSystemAuditRule(account,
                                                 fileSystemRights: FileSystemRights.Write | FileSystemRights.Modify | FileSystemRights.Delete | FileSystemRights.CreateFiles | FileSystemRights.Read | FileSystemRights.WriteData,
                                                 inheritanceFlags: InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                                                 propagationFlags: PropagationFlags.None,
                                                 flags: AuditFlags.Success | AuditFlags.Failure);

            return this;
        }

        public IMonitorService ArrangePermissions()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(_monitor.Path);
            DirectorySecurity dirSecurity = dirInfo.GetAccessControl(AccessControlSections.All);


            dirSecurity.AddAuditRule(_auditRule);

            dirInfo.SetAccessControl(dirSecurity);

            return this;
        }

        public IMonitorService PrepareAuditEventHandlers()
        {
            AuditEventHandler validatingHandler = new ValidatingAuditEventHandler();
            AuditEventHandler collectingHandler = new CollectingAuditEventHandler();
            AuditEventHandler accessTypeParsingHandler = new AccessTypeParsingAuditEventHandler();
            AuditEventHandler loggingHandler = new LoggingAuditEventHandler(_logFilePath);

            validatingHandler.SetNextHandler(collectingHandler);
            collectingHandler.SetNextHandler(accessTypeParsingHandler);
            accessTypeParsingHandler.SetNextHandler(loggingHandler);

            _auditEventHandler = validatingHandler;

            return this;
        }

        public IMonitorService AttachLogWatcher()
        {
            var startTime = DateTime.Now.ToUniversalTime().ToString("o");
            string query = $"*[System[EventID='4663']] and *[System[TimeCreated[@SystemTime >= '{startTime}']]]";

            EventLogQuery eventsQuery = new EventLogQuery("Security", PathType.LogName, query);

            _logWatcher = new EventLogWatcher(eventsQuery);
            _logWatcher.EventRecordWritten += new EventHandler<EventRecordWrittenEventArgs>(OnConsumingEvent);
            _logWatcher.Enabled = true;

            return this;
        }

        public void RemoveAuditRule()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(_monitor.Path);
            DirectorySecurity dirSecurity = dirInfo.GetAccessControl(AccessControlSections.All);
            dirSecurity.RemoveAuditRuleAll(_auditRule);
            dirInfo.SetAccessControl(dirSecurity);
        }

        public void Dispose()
        {
            _logWatcher.Dispose();
        }

        private void OnConsumingEvent(object sender, EventRecordWrittenEventArgs args)
        {
            EventEntity eventEntity = new EventEntity
            {
                FolderPath = _monitor.Path
            };

            try
            {
                _auditEventHandler.HandleRequest(source: args, target: eventEntity).GetAwaiter().GetResult();
            }
            catch (Exception ex)
            {
                _logger?.LogWarning(ex.Message);
            }
        }
    }
}
