using MalwareBytes.FileAuditSystem.Domain.DTO;
using MalwareBytes.FileAuditSystem.Service.Abstract;
using System;
using System.Diagnostics.Eventing.Reader;
using System.IO;
using System.Security.AccessControl;
using System.Security.Principal;

namespace MalwareBytes.FileAuditSystem.Service
{
    public class MonitorService : IMonitorService
    {
        private MonitorOption _monitor;
        private FileSystemAuditRule _auditRule;
        private EventLogWatcher _logWatcher;
        public MonitorService(MonitorOption monitor)
        {
            _monitor = monitor;
        }

        public IMonitorService SetAuditRule()
        {
            IdentityReference account = new SecurityIdentifier(WellKnownSidType.WorldSid, null).Translate(typeof(NTAccount));
            _auditRule = new FileSystemAuditRule(account,
                                                 fileSystemRights: FileSystemRights.Write | FileSystemRights.Modify | FileSystemRights.Delete | FileSystemRights.CreateFiles | FileSystemRights.Read | FileSystemRights.WriteData,
                                                 inheritanceFlags: InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit,
                                                 propagationFlags: PropagationFlags.None,
                                                 flags: AuditFlags.Success | AuditFlags.Failure);

            return this;
        }

        public IMonitorService ArrangePermissions()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(_monitor.Path);
            DirectorySecurity dirSecurity = dirInfo.GetAccessControl(AccessControlSections.All);


            dirSecurity.AddAuditRule(_auditRule);

            dirInfo.SetAccessControl(dirSecurity);

            return this;
        }

        public IMonitorService AttahLogWatcher()
        {
            var startTime = DateTime.Now.ToUniversalTime().ToString("o");
            string query = $"*[System[EventID='4663']] and *[System[TimeCreated[@SystemTime >= '{startTime}']]]";

            EventLogQuery eventsQuery = new EventLogQuery("Security", PathType.LogName, query);

            _logWatcher = new EventLogWatcher(eventsQuery);
            _logWatcher.EventRecordWritten += new EventHandler<EventRecordWrittenEventArgs>(onWatching);
            _logWatcher.Enabled = true;

            return this;
        }

        public void RemoveAuditRule()
        {
            DirectoryInfo dirInfo = new DirectoryInfo(_monitor.Path);
            DirectorySecurity dirSecurity = dirInfo.GetAccessControl(AccessControlSections.All);
            dirSecurity.RemoveAuditRuleAll(_auditRule);
            dirInfo.SetAccessControl(dirSecurity);
        }

        public void Dispose()
        {
            _logWatcher.Dispose();
        }

        private void onWatching(object sender, EventRecordWrittenEventArgs args)
        {
            //Check Event
            //Collect Event Info
            //Access Records cleaning
            //Logging
            if (args == null ||args.EventRecord == null)
            {
                return;
            }
            var fileName = args.EventRecord.Properties[6].Value.ToString();
            if (Directory.GetParent(fileName).FullName != _monitor.Path)
            {
                return;
            }
            var time = args.EventRecord.TimeCreated;
            var id = args.EventRecord.Id;
            var logname = args.EventRecord.LogName;
            var level = args.EventRecord.Level;
            var task = args.EventRecord.TaskDisplayName;
            var opCode = args.EventRecord.OpcodeDisplayName;
            var mname = args.EventRecord.MachineName;
            var processId = args.EventRecord.ProcessId;

            Console.WriteLine("START-----------------------------------START");
            Console.WriteLine($@"{time}, {id}, {logname}, {level}, {task}, {opCode}, {mname}, {processId}");
            Console.WriteLine("Properties....");
            foreach (var item in args.EventRecord.Properties)
            {
                Console.WriteLine($"{item.Value}");
            }
            Console.WriteLine("END-----------------------------------END");
        }
    }
}
